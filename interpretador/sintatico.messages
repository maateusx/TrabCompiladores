programa: PROGRAM PONTVIRG BEGIN BEGIN END PONTVIRG VIRGULA 
##
## Ends in an error in state: 127.
##
## comandos -> comando PONTVIRG . comandos [ END ]
##
## The known suffix of the stack is as follows:
## comando PONTVIRG 
##

Estado 127: Esperava um ou mais comandos

programa: PROGRAM PONTVIRG BEGIN BEGIN END WRITELN 
##
## Ends in an error in state: 126.
##
## comandos -> comando . [ END ]
## comandos -> comando . PONTVIRG comandos [ END ]
##
## The known suffix of the stack is as follows:
## comando 
##

Estado 126: Esperava ';'

programa: PROGRAM PONTVIRG BEGIN BEGIN VIRGULA 
##
## Ends in an error in state: 116.
##
## comando -> BEGIN . comandos END [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## BEGIN 
##

Estado 116: Esperava um ou mais comandos

programa: PROGRAM PONTVIRG BEGIN END PONTO WRITELN 
##
## Ends in an error in state: 160.
##
## programa -> PROGRAM PONTVIRG list(declaracao) list(funcao) BEGIN comandos END PONTO . EOF [ # ]
##
## The known suffix of the stack is as follows:
## PROGRAM PONTVIRG list(declaracao) list(funcao) BEGIN comandos END PONTO 
##

Estado 160: Todos os comandos devem ser incluidos entre o bloco begin/end. principal

programa: PROGRAM PONTVIRG BEGIN END WRITELN 
##
## Ends in an error in state: 159.
##
## programa -> PROGRAM PONTVIRG list(declaracao) list(funcao) BEGIN comandos END . PONTO EOF [ # ]
##
## The known suffix of the stack is as follows:
## PROGRAM PONTVIRG list(declaracao) list(funcao) BEGIN comandos END 
##

Estado 159: Esperava um '.'

programa: PROGRAM PONTVIRG BEGIN FOR ID ATRIB FALSE DOWNTO TRUE DO VIRGULA 
##
## Ends in an error in state: 132.
##
## comando_for -> FOR comando_atrib DOWNTO expressao DO . comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## FOR comando_atrib DOWNTO expressao DO 
##

Estado 132: Esperava um ou mais comandos

programa: PROGRAM PONTVIRG BEGIN FOR ID ATRIB FALSE DOWNTO TRUE WRITELN 
##
## Ends in an error in state: 131.
##
## comando_for -> FOR comando_atrib DOWNTO expressao . DO comando [ PONTVIRG END ELSE ]
## expressao -> expressao . SOMA expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## FOR comando_atrib DOWNTO expressao 
##

Estado 131: Esperava um 'do'

programa: PROGRAM PONTVIRG BEGIN FOR ID ATRIB FALSE DOWNTO WRITELN 
##
## Ends in an error in state: 130.
##
## comando_for -> FOR comando_atrib DOWNTO . expressao DO comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## FOR comando_atrib DOWNTO 
##

Estado 130: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN FOR ID ATRIB FALSE PONTVIRG 
##
## Ends in an error in state: 112.
##
## comando_for -> FOR comando_atrib . TO expressao DO comando [ PONTVIRG END ELSE ]
## comando_for -> FOR comando_atrib . DOWNTO expressao DO comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## FOR comando_atrib 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 107, spurious reduction of production comando_atrib -> ID ATRIB expressao 
##

Estado 112: Esperava um 'to' ou um 'downto'

programa: PROGRAM PONTVIRG BEGIN FOR ID ATRIB FALSE TO TRUE DO VIRGULA 
##
## Ends in an error in state: 115.
##
## comando_for -> FOR comando_atrib TO expressao DO . comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## FOR comando_atrib TO expressao DO 
##

Estado 115: Esperava um ou mais comandos

programa: PROGRAM PONTVIRG BEGIN FOR ID ATRIB FALSE TO TRUE WRITELN 
##
## Ends in an error in state: 114.
##
## comando_for -> FOR comando_atrib TO expressao . DO comando [ PONTVIRG END ELSE ]
## expressao -> expressao . SOMA expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## FOR comando_atrib TO expressao 
##

Estado 114: Esperava um 'do'

programa: PROGRAM PONTVIRG BEGIN FOR ID ATRIB FALSE TO WRITELN 
##
## Ends in an error in state: 113.
##
## comando_for -> FOR comando_atrib TO . expressao DO comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## FOR comando_atrib TO 
##

Estado 113: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN FOR ID ATRIB WRITELN 
##
## Ends in an error in state: 111.
##
## comando_atrib -> ID ATRIB . expressao [ TO DOWNTO ]
##
## The known suffix of the stack is as follows:
## ID ATRIB 
##

Estado 111: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN FOR ID WRITELN 
##
## Ends in an error in state: 110.
##
## comando_atrib -> ID . ATRIB expressao [ TO DOWNTO ]
##
## The known suffix of the stack is as follows:
## ID 
##

Estado 110: Esperava um ':='

programa: PROGRAM PONTVIRG BEGIN FOR WRITELN 
##
## Ends in an error in state: 109.
##
## comando_for -> FOR . comando_atrib TO expressao DO comando [ PONTVIRG END ELSE ]
## comando_for -> FOR . comando_atrib DOWNTO expressao DO comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## FOR 
##

Estado 109: Esperava um identificador para o comando de atribuicao

programa: PROGRAM PONTVIRG BEGIN ID ATRIB ID WRITELN 
##
## Ends in an error in state: 105.
##
## comando_funcao -> ID ATRIB ID . args [ PONTVIRG END ELSE ]
## expressao -> ID . [ SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## ID ATRIB ID 
##

Estado 105: Esperava um ';' ou argumentos

programa: PROGRAM PONTVIRG BEGIN ID ATRIB TRUE WRITELN 
##
## Ends in an error in state: 107.
##
## comando_atrib -> ID ATRIB expressao . [ TO PONTVIRG END ELSE DOWNTO ]
## expressao -> expressao . SOMA expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ TO SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL END ELSE DOWNTO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## ID ATRIB expressao 
##

Estado 107: Esperava um ';'

programa: PROGRAM PONTVIRG BEGIN ID ATRIB WRITELN 
##
## Ends in an error in state: 104.
##
## comando_atrib -> ID ATRIB . expressao [ PONTVIRG END ELSE ]
## comando_funcao -> ID ATRIB . ID args [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## ID ATRIB 
##

Estado 104: Esperava uma expressao ou um identificador

programa: PROGRAM PONTVIRG BEGIN ID WRITELN 
##
## Ends in an error in state: 103.
##
## comando_atrib -> ID . ATRIB expressao [ PONTVIRG END ELSE ]
## comando_funcao -> ID . ATRIB ID args [ PONTVIRG END ELSE ]
## comando_funcao -> ID . args [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## ID 
##

Estado 103: Esperava um ':=' ou argumentos

programa: PROGRAM PONTVIRG BEGIN IF TRUE THEN BEGIN END ELSE VIRGULA 
##
## Ends in an error in state: 135.
##
## comando_if -> IF expressao THEN comando ELSE . comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## IF expressao THEN comando ELSE 
##

Estado 135: Esperava um ou mais comandos 

programa: PROGRAM PONTVIRG BEGIN IF TRUE THEN BEGIN END WRITELN 
##
## Ends in an error in state: 134.
##
## comando_if -> IF expressao THEN comando . [ PONTVIRG END ELSE ]
## comando_if -> IF expressao THEN comando . ELSE comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## IF expressao THEN comando 
##

Estado 134: Esperava um ';' ou um 'else'

programa: PROGRAM PONTVIRG BEGIN IF TRUE THEN VIRGULA 
##
## Ends in an error in state: 102.
##
## comando_if -> IF expressao THEN . comando [ PONTVIRG END ELSE ]
## comando_if -> IF expressao THEN . comando ELSE comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## IF expressao THEN 
##

Estado 102: Esperava um ou mais comandos

programa: PROGRAM PONTVIRG BEGIN IF TRUE WRITELN 
##
## Ends in an error in state: 101.
##
## comando_if -> IF expressao . THEN comando [ PONTVIRG END ELSE ]
## comando_if -> IF expressao . THEN comando ELSE comando [ PONTVIRG END ELSE ]
## expressao -> expressao . SOMA expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ THEN SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## IF expressao 
##

Estado 101: Esperava um 'then'

programa: PROGRAM PONTVIRG BEGIN IF WRITELN 
##
## Ends in an error in state: 100.
##
## comando_if -> IF . expressao THEN comando [ PONTVIRG END ELSE ]
## comando_if -> IF . expressao THEN comando ELSE comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## IF 
##

Estado 100: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN READ WRITELN 
##
## Ends in an error in state: 98.
##
## comando_read -> READ . seq_idents [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## READ 
##

Estado 98: Esperava um '('

programa: PROGRAM PONTVIRG BEGIN READLN APAR ID VIRGULA WRITELN 
##
## Ends in an error in state: 94.
##
## idents -> idents VIRGULA . ID [ VIRGULA FPAR ]
##
## The known suffix of the stack is as follows:
## idents VIRGULA 
##

Estado 94: Esperava um identificador

programa: PROGRAM PONTVIRG BEGIN READLN APAR ID WRITELN 
##
## Ends in an error in state: 93.
##
## idents -> idents . VIRGULA ID [ VIRGULA FPAR ]
## seq_idents -> APAR idents . FPAR [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## APAR idents 
##

Estado 93: Esperava uma ',' ou um ')'

programa: PROGRAM PONTVIRG BEGIN READLN APAR WRITELN 
##
## Ends in an error in state: 90.
##
## seq_idents -> APAR . FPAR [ PONTVIRG END ELSE ]
## seq_idents -> APAR . idents FPAR [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## APAR 
##

Estado 90: Esperava um ou mais identificadores ou um ')'

programa: PROGRAM PONTVIRG BEGIN READLN WRITELN 
##
## Ends in an error in state: 89.
##
## comando_read -> READLN . seq_idents [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## READLN 
##

Estado 89: Esperava um '('

programa: PROGRAM PONTVIRG BEGIN VIRGULA 
##
## Ends in an error in state: 157.
##
## programa -> PROGRAM PONTVIRG list(declaracao) list(funcao) BEGIN . comandos END PONTO EOF [ # ]
##
## The known suffix of the stack is as follows:
## PROGRAM PONTVIRG list(declaracao) list(funcao) BEGIN 
##

Estado 157: Esperava um ou mais comandos ou um 'end.'

programa: PROGRAM PONTVIRG BEGIN WHILE APAR TRUE WRITELN 
##
## Ends in an error in state: 46.
##
## expressao -> expressao . SOMA expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> APAR expressao . FPAR [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## APAR expressao 
##

Estado 46: Esperava um operador ou um ')'

programa: PROGRAM PONTVIRG BEGIN WHILE APAR WRITELN 
##
## Ends in an error in state: 45.
##
## expressao -> APAR . expressao FPAR [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## APAR 
##

Estado 45: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE NOT TRUE WRITELN 
##
## Ends in an error in state: 76.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> NOT expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## NOT expressao 
##

Estado 76: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE NOT WRITELN 
##
## Ends in an error in state: 39.
##
## expressao -> NOT . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## NOT 
##

Estado 39: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE AND TRUE WRITELN 
##
## Ends in an error in state: 72.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao AND expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao AND expressao 
##

Estado 72: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE AND WRITELN 
##
## Ends in an error in state: 71.
##
## expressao -> expressao AND . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao AND 
##

Estado 71: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE DIFERENTE TRUE WRITELN 
##
## Ends in an error in state: 75.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao DIFERENTE expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao DIFERENTE expressao 
##

Estado 75: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE DIFERENTE WRITELN 
##
## Ends in an error in state: 74.
##
## expressao -> expressao DIFERENTE . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao DIFERENTE 
##

Estado 74: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE DIVINT WRITELN 
##
## Ends in an error in state: 53.
##
## expressao -> expressao DIVINT . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao DIVINT 
##

Estado 53: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE DIVISAO WRITELN 
##
## Ends in an error in state: 51.
##
## expressao -> expressao DIVISAO . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao DIVISAO 
##

Estado 51: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE DO VIRGULA 
##
## Ends in an error in state: 88.
##
## comando_while -> WHILE expressao DO . comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## WHILE expressao DO 
##

Estado 88: Esperava um ou mais comandos

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE IGUAL TRUE WRITELN 
##
## Ends in an error in state: 70.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao IGUAL expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao IGUAL expressao 
##

Estado 70: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE IGUAL WRITELN 
##
## Ends in an error in state: 69.
##
## expressao -> expressao IGUAL . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao IGUAL 
##

Estado 69: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MAIOR TRUE WRITELN 
##
## Ends in an error in state: 68.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao MAIOR expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MAIOR expressao 
##

Estado 68: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MAIOR WRITELN 
##
## Ends in an error in state: 67.
##
## expressao -> expressao MAIOR . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MAIOR 
##

Estado 67: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MAIORIGUAL TRUE WRITELN 
##
## Ends in an error in state: 66.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao MAIORIGUAL expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MAIORIGUAL expressao 
##

Estado 66: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MAIORIGUAL WRITELN 
##
## Ends in an error in state: 65.
##
## expressao -> expressao MAIORIGUAL . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MAIORIGUAL 
##

Estado 65: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MENOR TRUE WRITELN 
##
## Ends in an error in state: 64.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao MENOR expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MENOR expressao 
##

Estado 64: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MENOR WRITELN 
##
## Ends in an error in state: 63.
##
## expressao -> expressao MENOR . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MENOR 
##

Estado 63: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MENORIGUAL TRUE WRITELN 
##
## Ends in an error in state: 62.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao MENORIGUAL expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MENORIGUAL expressao 
##

Estado 62: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MENORIGUAL WRITELN 
##
## Ends in an error in state: 61.
##
## expressao -> expressao MENORIGUAL . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MENORIGUAL 
##

Estado 61: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MOD TRUE WRITELN 
##
## Ends in an error in state: 60.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao MOD expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MOD expressao 
##

Estado 60: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MOD WRITELN 
##
## Ends in an error in state: 59.
##
## expressao -> expressao MOD . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MOD 
##

Estado 59: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE MULT WRITELN 
##
## Ends in an error in state: 49.
##
## expressao -> expressao MULT . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao MULT 
##

Estado 49: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE OR TRUE WRITELN 
##
## Ends in an error in state: 58.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao OR expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao OR expressao 
##

Estado 58: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE OR WRITELN 
##
## Ends in an error in state: 57.
##
## expressao -> expressao OR . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao OR 
##

Estado 57: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE SOMA TRUE WRITELN 
##
## Ends in an error in state: 56.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao SOMA expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao SOMA expressao 
##

Estado 56: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE SOMA WRITELN 
##
## Ends in an error in state: 55.
##
## expressao -> expressao SOMA . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao SOMA 
##

Estado 55: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE SUBTR TRUE WRITELN 
##
## Ends in an error in state: 48.
##
## expressao -> expressao . SOMA expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao SUBTR expressao . [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao SUBTR expressao 
##

Estado 48: Esperava um operador ou um 'do'

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE SUBTR WRITELN 
##
## Ends in an error in state: 47.
##
## expressao -> expressao SUBTR . expressao [ VIRGULA TO THEN SUBTR SOMA PONTVIRG OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR END ELSE DOWNTO DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## expressao SUBTR 
##

Estado 47: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WHILE TRUE WRITELN 
##
## Ends in an error in state: 87.
##
## comando_while -> WHILE expressao . DO comando [ PONTVIRG END ELSE ]
## expressao -> expressao . SOMA expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL DO DIVISAO DIVINT DIFERENTE AND ]
##
## The known suffix of the stack is as follows:
## WHILE expressao 
##

Estado 87: Esperava um 'do' ou um operador

programa: PROGRAM PONTVIRG BEGIN WHILE WRITELN 
##
## Ends in an error in state: 86.
##
## comando_while -> WHILE . expressao DO comando [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## WHILE 
##

Estado 86: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WRITE WRITELN 
##
## Ends in an error in state: 84.
##
## comando_write -> WRITE . args [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## WRITE 
##

Estado 84: Esperava um '(' seguido de zero ou mais argumentos

programa: PROGRAM PONTVIRG BEGIN WRITELN APAR TRUE VIRGULA TRUE WRITELN 
##
## Ends in an error in state: 80.
##
## expressao -> expressao . SOMA expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## seq_args -> seq_args VIRGULA expressao . [ VIRGULA FPAR ]
##
## The known suffix of the stack is as follows:
## seq_args VIRGULA expressao 
##

Estado 80: Esperava uma ','

programa: PROGRAM PONTVIRG BEGIN WRITELN APAR TRUE VIRGULA WRITELN 
##
## Ends in an error in state: 79.
##
## seq_args -> seq_args VIRGULA . expressao [ VIRGULA FPAR ]
##
## The known suffix of the stack is as follows:
## seq_args VIRGULA 
##

Estado 79: Esperava uma expressao

programa: PROGRAM PONTVIRG BEGIN WRITELN APAR TRUE WRITELN 
##
## Ends in an error in state: 82.
##
## expressao -> expressao . SOMA expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . SUBTR expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MULT expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVISAO expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIVINT expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MOD expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . AND expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . OR expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . IGUAL expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . DIFERENTE expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIOR expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENOR expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MENORIGUAL expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## expressao -> expressao . MAIORIGUAL expressao [ VIRGULA SUBTR SOMA OR MULT MOD MENORIGUAL MENOR MAIORIGUAL MAIOR IGUAL FPAR DIVISAO DIVINT DIFERENTE AND ]
## seq_args -> expressao . [ VIRGULA FPAR ]
##
## The known suffix of the stack is as follows:
## expressao 
##

Estado 82: Esperava um ')' ou uma ','

programa: PROGRAM PONTVIRG BEGIN WRITELN APAR WRITELN 
##
## Ends in an error in state: 37.
##
## args -> APAR . FPAR [ PONTVIRG END ELSE ]
## args -> APAR . seq_args FPAR [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## APAR 
##

Estado 37: Esperava um ')' ou mais argumentos

programa: PROGRAM PONTVIRG BEGIN WRITELN WRITELN 
##
## Ends in an error in state: 36.
##
## comando_write -> WRITELN . args [ PONTVIRG END ELSE ]
##
## The known suffix of the stack is as follows:
## WRITELN 
##

Estado 36: Esperava um '(' seguido de zero ou mais argumentos

programa: PROGRAM PONTVIRG FUNCTION ID APAR FPAR DPONTO STRING PONTVIRG BEGIN END WRITELN 
##
## Ends in an error in state: 154.
##
## funcao -> FUNCTION ID APAR list(params) FPAR DPONTO tipo PONTVIRG list(declaracao) BEGIN comandos END . PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID APAR list(params) FPAR DPONTO tipo PONTVIRG list(declaracao) BEGIN comandos END 
##

Estado 154: Esperava um ';'

programa: PROGRAM PONTVIRG FUNCTION ID APAR FPAR DPONTO STRING PONTVIRG BEGIN VIRGULA 
##
## Ends in an error in state: 152.
##
## funcao -> FUNCTION ID APAR list(params) FPAR DPONTO tipo PONTVIRG list(declaracao) BEGIN . comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID APAR list(params) FPAR DPONTO tipo PONTVIRG list(declaracao) BEGIN 
##

Estado 152: Esperava um ou mais comandos

programa: PROGRAM PONTVIRG FUNCTION ID APAR FPAR DPONTO STRING PONTVIRG ID DPONTO BOOLEAN PONTVIRG PROCEDURE 
##
## Ends in an error in state: 151.
##
## funcao -> FUNCTION ID APAR list(params) FPAR DPONTO tipo PONTVIRG list(declaracao) . BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID APAR list(params) FPAR DPONTO tipo PONTVIRG list(declaracao) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 141, spurious reduction of production list(declaracao) -> 
## In state 142, spurious reduction of production list(declaracao) -> declaracao list(declaracao) 
##

Estado 151: Esperava um 'begin'

programa: PROGRAM PONTVIRG FUNCTION ID APAR FPAR DPONTO STRING PONTVIRG WRITELN 
##
## Ends in an error in state: 150.
##
## funcao -> FUNCTION ID APAR list(params) FPAR DPONTO tipo PONTVIRG . list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID APAR list(params) FPAR DPONTO tipo PONTVIRG 
##

Estado 150: Esperava zero ou mais declaracoes de variaveis ou um 'begin'

programa: PROGRAM PONTVIRG FUNCTION ID APAR FPAR DPONTO STRING WRITELN 
##
## Ends in an error in state: 149.
##
## funcao -> FUNCTION ID APAR list(params) FPAR DPONTO tipo . PONTVIRG list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID APAR list(params) FPAR DPONTO tipo 
##

Estado 149: Esperava um ';'

programa: PROGRAM PONTVIRG FUNCTION ID APAR FPAR DPONTO WRITELN 
##
## Ends in an error in state: 148.
##
## funcao -> FUNCTION ID APAR list(params) FPAR DPONTO . tipo PONTVIRG list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID APAR list(params) FPAR DPONTO 
##

Estado 148: Esperava um tipo

programa: PROGRAM PONTVIRG FUNCTION ID APAR FPAR WRITELN 
##
## Ends in an error in state: 147.
##
## funcao -> FUNCTION ID APAR list(params) FPAR . DPONTO tipo PONTVIRG list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID APAR list(params) FPAR 
##

Estado 147: Esperava ':'

programa: PROGRAM PONTVIRG FUNCTION ID APAR WRITELN 
##
## Ends in an error in state: 145.
##
## funcao -> FUNCTION ID APAR . list(params) FPAR DPONTO tipo PONTVIRG list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID APAR 
##

Estado 145: Esperava ')' ou os parametros da funcao

programa: PROGRAM PONTVIRG FUNCTION ID WRITELN 
##
## Ends in an error in state: 144.
##
## funcao -> FUNCTION ID . APAR list(params) FPAR DPONTO tipo PONTVIRG list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNCTION ID 
##

Estado 144: Esperava um '('

programa: PROGRAM PONTVIRG FUNCTION WRITELN 
##
## Ends in an error in state: 143.
##
## funcao -> FUNCTION . ID APAR list(params) FPAR DPONTO tipo PONTVIRG list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## FUNCTION 
##

Estado 143: Esperava um identificador, o nome da funcao

programa: PROGRAM PONTVIRG ID DPONTO BOOLEAN PONTVIRG WRITELN 
##
## Ends in an error in state: 141.
##
## list(declaracao) -> declaracao . list(declaracao) [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## declaracao 
##

Estado 141: Esperava um 'begin' ou mais declaracoes de variaveis

programa: PROGRAM PONTVIRG ID DPONTO STRING WRITELN 
##
## Ends in an error in state: 18.
##
## declaracao -> separated_nonempty_list(VIRGULA,ID) DPONTO tipo . PONTVIRG [ VAR PROCEDURE ID FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(VIRGULA,ID) DPONTO tipo 
##

Estado 18: Esperava um ';'

programa: PROGRAM PONTVIRG ID DPONTO WRITELN 
##
## Ends in an error in state: 17.
##
## declaracao -> separated_nonempty_list(VIRGULA,ID) DPONTO . tipo PONTVIRG [ VAR PROCEDURE ID FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## separated_nonempty_list(VIRGULA,ID) DPONTO 
##

Estado 17: Esperava um tipo

programa: PROGRAM PONTVIRG ID VIRGULA WRITELN 
##
## Ends in an error in state: 5.
##
## separated_nonempty_list(VIRGULA,ID) -> ID VIRGULA . separated_nonempty_list(VIRGULA,ID) [ DPONTO ]
##
## The known suffix of the stack is as follows:
## ID VIRGULA 
##

Estado 5: Esperava um identificador

programa: PROGRAM PONTVIRG ID WRITELN 
##
## Ends in an error in state: 4.
##
## separated_nonempty_list(VIRGULA,ID) -> ID . [ DPONTO ]
## separated_nonempty_list(VIRGULA,ID) -> ID . VIRGULA separated_nonempty_list(VIRGULA,ID) [ DPONTO ]
##
## The known suffix of the stack is as follows:
## ID 
##

Estado 4: Esperava ':' ou ','

programa: PROGRAM PONTVIRG PROCEDURE ID APAR DPONTO STRING PONTVIRG WRITELN 
##
## Ends in an error in state: 25.
##
## list(params) -> params . list(params) [ FPAR ]
##
## The known suffix of the stack is as follows:
## params 
##

Estado 25: Esperava zero ou mais parametros da funcao

programa: PROGRAM PONTVIRG PROCEDURE ID APAR DPONTO STRING WRITELN 
##
## Ends in an error in state: 28.
##
## params -> loption(separated_nonempty_list(VIRGULA,ID)) DPONTO tipo . PONTVIRG [ ID FPAR DPONTO ]
## params -> loption(separated_nonempty_list(VIRGULA,ID)) DPONTO tipo . [ ID FPAR DPONTO ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(VIRGULA,ID)) DPONTO tipo 
##

Estado 28: Esperava ';' ou ')'

programa: PROGRAM PONTVIRG PROCEDURE ID APAR DPONTO WRITELN 
##
## Ends in an error in state: 27.
##
## params -> loption(separated_nonempty_list(VIRGULA,ID)) DPONTO . tipo PONTVIRG [ ID FPAR DPONTO ]
## params -> loption(separated_nonempty_list(VIRGULA,ID)) DPONTO . tipo [ ID FPAR DPONTO ]
##
## The known suffix of the stack is as follows:
## loption(separated_nonempty_list(VIRGULA,ID)) DPONTO 
##

Estado 27: Esperava um tipo

programa: PROGRAM PONTVIRG PROCEDURE ID APAR FPAR PONTVIRG BEGIN END PONTVIRG WRITELN 
##
## Ends in an error in state: 162.
##
## list(funcao) -> funcao . list(funcao) [ BEGIN ]
##
## The known suffix of the stack is as follows:
## funcao 
##

Estado 162: Esperava um 'begin' ou uma nova declaracao de funcao

programa: PROGRAM PONTVIRG PROCEDURE ID APAR FPAR PONTVIRG BEGIN END WRITELN 
##
## Ends in an error in state: 139.
##
## funcao -> PROCEDURE ID APAR list(params) FPAR PONTVIRG list(declaracao) BEGIN comandos END . PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## PROCEDURE ID APAR list(params) FPAR PONTVIRG list(declaracao) BEGIN comandos END 
##

Estado 139: Esperava um ';'

programa: PROGRAM PONTVIRG PROCEDURE ID APAR FPAR PONTVIRG BEGIN VIRGULA 
##
## Ends in an error in state: 35.
##
## funcao -> PROCEDURE ID APAR list(params) FPAR PONTVIRG list(declaracao) BEGIN . comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## PROCEDURE ID APAR list(params) FPAR PONTVIRG list(declaracao) BEGIN 
##

Estado 35: Esperava um ou mais comandos ou 'end'

programa: PROGRAM PONTVIRG PROCEDURE ID APAR FPAR PONTVIRG ID DPONTO BOOLEAN PONTVIRG PROCEDURE 
##
## Ends in an error in state: 34.
##
## funcao -> PROCEDURE ID APAR list(params) FPAR PONTVIRG list(declaracao) . BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## PROCEDURE ID APAR list(params) FPAR PONTVIRG list(declaracao) 
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 141, spurious reduction of production list(declaracao) -> 
## In state 142, spurious reduction of production list(declaracao) -> declaracao list(declaracao) 
##

Estado 34: Esperava um 'begin'

programa: PROGRAM PONTVIRG PROCEDURE ID APAR FPAR PONTVIRG WRITELN 
##
## Ends in an error in state: 33.
##
## funcao -> PROCEDURE ID APAR list(params) FPAR PONTVIRG . list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## PROCEDURE ID APAR list(params) FPAR PONTVIRG 
##

Estado 33: Esperava declaracoes de variaveis ou 'begin'

programa: PROGRAM PONTVIRG PROCEDURE ID APAR FPAR WRITELN 
##
## Ends in an error in state: 32.
##
## funcao -> PROCEDURE ID APAR list(params) FPAR . PONTVIRG list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## PROCEDURE ID APAR list(params) FPAR 
##

Estado 32: Esperava ';'

programa: PROGRAM PONTVIRG PROCEDURE ID APAR WRITELN 
##
## Ends in an error in state: 23.
##
## funcao -> PROCEDURE ID APAR . list(params) FPAR PONTVIRG list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## PROCEDURE ID APAR 
##

Estado 23: Esperava argumentos ou ')'

programa: PROGRAM PONTVIRG PROCEDURE ID WRITELN 
##
## Ends in an error in state: 22.
##
## funcao -> PROCEDURE ID . APAR list(params) FPAR PONTVIRG list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## PROCEDURE ID 
##

Estado 22: Esperava '('

programa: PROGRAM PONTVIRG PROCEDURE WRITELN 
##
## Ends in an error in state: 21.
##
## funcao -> PROCEDURE . ID APAR list(params) FPAR PONTVIRG list(declaracao) BEGIN comandos END PONTVIRG [ PROCEDURE FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## PROCEDURE 
##

Estado 21: Esperava um identificador da funcao

programa: PROGRAM PONTVIRG VAR ID DPONTO STRING WRITELN 
##
## Ends in an error in state: 14.
##
## declaracao -> VAR separated_nonempty_list(VIRGULA,ID) DPONTO tipo . PONTVIRG [ VAR PROCEDURE ID FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## VAR separated_nonempty_list(VIRGULA,ID) DPONTO tipo 
##

Estado 14: Esperava ';'

programa: PROGRAM PONTVIRG VAR ID DPONTO WRITELN 
##
## Ends in an error in state: 8.
##
## declaracao -> VAR separated_nonempty_list(VIRGULA,ID) DPONTO . tipo PONTVIRG [ VAR PROCEDURE ID FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## VAR separated_nonempty_list(VIRGULA,ID) DPONTO 
##

Estado 8: Esperava um tipo

programa: PROGRAM PONTVIRG VAR WRITELN 
##
## Ends in an error in state: 3.
##
## declaracao -> VAR . separated_nonempty_list(VIRGULA,ID) DPONTO tipo PONTVIRG [ VAR PROCEDURE ID FUNCTION BEGIN ]
##
## The known suffix of the stack is as follows:
## VAR 
##

Estado 3: Esperava uma declaracao de variavel

programa: PROGRAM PONTVIRG WRITELN 
##
## Ends in an error in state: 2.
##
## programa -> PROGRAM PONTVIRG . list(declaracao) list(funcao) BEGIN comandos END PONTO EOF [ # ]
##
## The known suffix of the stack is as follows:
## PROGRAM PONTVIRG 
##

Estado 2: Esperava declaracao de variavel ou declaracao de funcao ou um 'begin'

programa: PROGRAM WRITELN 
##
## Ends in an error in state: 1.
##
## programa -> PROGRAM . PONTVIRG list(declaracao) list(funcao) BEGIN comandos END PONTO EOF [ # ]
##
## The known suffix of the stack is as follows:
## PROGRAM 
##

Estado 1: Esperava ';'

programa: WRITELN 
##
## Ends in an error in state: 0.
##
## programa' -> . programa [ # ]
##
## The known suffix of the stack is as follows:
## 
##

Estado 0: Esperava 'program'

